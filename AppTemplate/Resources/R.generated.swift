//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var infoPlist: infoPlist { .init(source: .init(bundle: bundle, tableName: "InfoPlist", preferredLanguages: preferredLanguages, locale: locale)) }
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func infoPlist(preferredLanguages: [String]) -> infoPlist {
      .init(source: .init(bundle: bundle, tableName: "InfoPlist", preferredLanguages: preferredLanguages, locale: locale))
    }
    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.infoPlist` struct is generated, and contains static references to 4 localization keys.
    struct infoPlist {
      let source: RswiftResources.StringResource.Source

      /// en translation: AppTemplate
      ///
      /// Key: CFBundleDisplayName
      ///
      /// Locales: en, zh-Hans
      var cfBundleDisplayName: RswiftResources.StringResource { .init(key: "CFBundleDisplayName", tableName: "InfoPlist", source: source, developmentValue: "AppTemplate", comment: nil) }

      /// en translation: Used for taking photos, uploading images for profile pictures and feedback, as well as scanning QR codes to connect devices.
      ///
      /// Key: NSCameraUsageDescription
      ///
      /// Locales: en, zh-Hans
      var nsCameraUsageDescription: RswiftResources.StringResource { .init(key: "NSCameraUsageDescription", tableName: "InfoPlist", source: source, developmentValue: "Used for taking photos, uploading images for profile pictures and feedback, as well as scanning QR codes to connect devices.", comment: nil) }

      /// en translation: Used to access photos, upload images from your gallery for profile pictures, and provide feedback.
      ///
      /// Key: NSPhotoLibraryAddUsageDescription
      ///
      /// Locales: en, zh-Hans
      var nsPhotoLibraryAddUsageDescription: RswiftResources.StringResource { .init(key: "NSPhotoLibraryAddUsageDescription", tableName: "InfoPlist", source: source, developmentValue: "Used to access photos, upload images from your gallery for profile pictures, and provide feedback.", comment: nil) }

      /// en translation: Used to access photos, upload images from your gallery for profile pictures, and provide feedback.
      ///
      /// Key: NSPhotoLibraryUsageDescription
      ///
      /// Locales: en, zh-Hans
      var nsPhotoLibraryUsageDescription: RswiftResources.StringResource { .init(key: "NSPhotoLibraryUsageDescription", tableName: "InfoPlist", source: source, developmentValue: "Used to access photos, upload images from your gallery for profile pictures, and provide feedback.", comment: nil) }
    }

    /// This `_R.string.localizable` struct is generated, and contains static references to 12 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// en translation: Unable to connect to the Internet
      ///
      /// Key: app_no_internet_tips
      ///
      /// Locales: en, zh-Hans
      var app_no_internet_tips: RswiftResources.StringResource { .init(key: "app_no_internet_tips", tableName: "Localizable", source: source, developmentValue: "Unable to connect to the Internet", comment: nil) }

      /// en translation: You are currently on mobile data. Please be mindful of your data usage.
      ///
      /// Key: app_use_mobile_data_tips
      ///
      /// Locales: en, zh-Hans
      var app_use_mobile_data_tips: RswiftResources.StringResource { .init(key: "app_use_mobile_data_tips", tableName: "Localizable", source: source, developmentValue: "You are currently on mobile data. Please be mindful of your data usage.", comment: nil) }

      /// en translation: Loading…
      ///
      /// Key: mj_footer_loading
      ///
      /// Locales: en, zh-Hans
      var mj_footer_loading: RswiftResources.StringResource { .init(key: "mj_footer_loading", tableName: "Localizable", source: source, developmentValue: "Loading…", comment: nil) }

      /// en translation: No more data
      ///
      /// Key: mj_footer_nodata
      ///
      /// Locales: en, zh-Hans
      var mj_footer_nodata: RswiftResources.StringResource { .init(key: "mj_footer_nodata", tableName: "Localizable", source: source, developmentValue: "No more data", comment: nil) }

      /// en translation: Tap or pull up to load more
      ///
      /// Key: mj_footer_refresh
      ///
      /// Locales: en, zh-Hans
      var mj_footer_refresh: RswiftResources.StringResource { .init(key: "mj_footer_refresh", tableName: "Localizable", source: source, developmentValue: "Tap or pull up to load more", comment: nil) }

      /// en translation: Last update
      ///
      /// Key: mj_header_lastupdate
      ///
      /// Locales: en, zh-Hans
      var mj_header_lastupdate: RswiftResources.StringResource { .init(key: "mj_header_lastupdate", tableName: "Localizable", source: source, developmentValue: "Last update", comment: nil) }

      /// en translation: Loading…
      ///
      /// Key: mj_header_loading
      ///
      /// Locales: en, zh-Hans
      var mj_header_loading: RswiftResources.StringResource { .init(key: "mj_header_loading", tableName: "Localizable", source: source, developmentValue: "Loading…", comment: nil) }

      /// en translation: No record
      ///
      /// Key: mj_header_norecord
      ///
      /// Locales: en, zh-Hans
      var mj_header_norecord: RswiftResources.StringResource { .init(key: "mj_header_norecord", tableName: "Localizable", source: source, developmentValue: "No record", comment: nil) }

      /// en translation: Pull down to refresh
      ///
      /// Key: mj_header_refresh
      ///
      /// Locales: en, zh-Hans
      var mj_header_refresh: RswiftResources.StringResource { .init(key: "mj_header_refresh", tableName: "Localizable", source: source, developmentValue: "Pull down to refresh", comment: nil) }

      /// en translation: Release to refresh
      ///
      /// Key: mj_header_release
      ///
      /// Locales: en, zh-Hans
      var mj_header_release: RswiftResources.StringResource { .init(key: "mj_header_release", tableName: "Localizable", source: source, developmentValue: "Release to refresh", comment: nil) }

      /// en translation: Today
      ///
      /// Key: mj_header_today
      ///
      /// Locales: en, zh-Hans
      var mj_header_today: RswiftResources.StringResource { .init(key: "mj_header_today", tableName: "Localizable", source: source, developmentValue: "Today", comment: nil) }

      /// en translation: No Records Available
      ///
      /// Key: string_not_record_yet_tips
      ///
      /// Locales: en, zh-Hans
      var string_not_record_yet_tips: RswiftResources.StringResource { .init(key: "string_not_record_yet_tips", tableName: "Localizable", source: source, developmentValue: "No Records Available", comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 3 images, and 1 namespaces.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `icon_next_black`.
    var icon_next_black: RswiftResources.ImageResource { .init(name: "icon_next_black", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon_next_gray`.
    var icon_next_gray: RswiftResources.ImageResource { .init(name: "icon_next_gray", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon_null_data`.
    var icon_null_data: RswiftResources.ImageResource { .init(name: "icon_null_data", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
    var tabBar: tabBar { .init(bundle: bundle) }

    func tabBar(bundle: Foundation.Bundle) -> tabBar {
      .init(bundle: bundle)
    }


    /// This `_R.image.tabBar` struct is generated, and contains static references to 4 tabBars.
    struct tabBar {
      let bundle: Foundation.Bundle

      /// Image `tabBar/icon_home_h`.
      var icon_home_h: RswiftResources.ImageResource { .init(name: "tabBar/icon_home_h", path: ["tabBar"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

      /// Image `tabBar/icon_home_n`.
      var icon_home_n: RswiftResources.ImageResource { .init(name: "tabBar/icon_home_n", path: ["tabBar"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

      /// Image `tabBar/icon_me_h`.
      var icon_me_h: RswiftResources.ImageResource { .init(name: "tabBar/icon_me_h", path: ["tabBar"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

      /// Image `tabBar/icon_me_n`.
      var icon_me_n: RswiftResources.ImageResource { .init(name: "tabBar/icon_me_n", path: ["tabBar"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
    }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
        var uiWindowSceneSessionRoleApplication: uiWindowSceneSessionRoleApplication { .init(bundle: bundle) }

        func uiWindowSceneSessionRoleApplication(bundle: Foundation.Bundle) -> uiWindowSceneSessionRoleApplication {
          .init(bundle: bundle)
        }

        struct uiWindowSceneSessionRoleApplication {
          let bundle: Foundation.Bundle
          var defaultConfiguration: defaultConfiguration { .init(bundle: bundle) }

          func defaultConfiguration(bundle: Foundation.Bundle) -> defaultConfiguration {
            .init(bundle: bundle)
          }

          struct defaultConfiguration {
            let bundle: Foundation.Bundle
            var uiSceneConfigurationName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneConfigurationName") ?? "Default Configuration" }
            var uiSceneDelegateClassName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate" }
            var uiSceneStoryboardFile: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneStoryboardFile") ?? "Main" }
          }
        }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 2 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `PrivacyInfo.xcprivacy`.
    var privacyInfoXcprivacy: RswiftResources.FileResource { .init(name: "PrivacyInfo", pathExtension: "xcprivacy", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `jstest.html`.
    var jstestHtml: RswiftResources.FileResource { .init(name: "jstest", pathExtension: "html", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
      try self.main.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "Main"
      func validate() throws {

      }
    }
  }
}