//
//  Theme.swift
//  LuteGo
//
//  Created by hubin.h on 2025/5/9.
//

// MARK: - 业务拓展(待梳理)
extension Themes.font {
    
    static func Zapfino(_ size: CGFloat) -> UIFont {
        UIFont(name: "Zapfino", size: size)!
    }
    
    /// 数字常用字体
    static func DIN(_ size: CGFloat) -> UIFont {
        return UIFont(name: "DIN Alternate", size: size)!
    }
}
    
extension Themes.color {
    /// 细浅黑 333333
    static let thinBlack = UIColor(hexStr: "#333333")
    /// 深灰色 666666
    static let gray = UIColor(hexStr: "#666666")
    /// 浅灰色 999999
    static let thinGray = UIColor(hexStr: "#999999")
    /// 分割线 E5E5E5
    static let separator = UIColor(hexStr: "#E5E5E5")
    /// 报错红 FA5151
    static let error = UIColor(hexStr: "#FA5151")
    /// 删除红 EE8282
    static let remove = UIColor(hexStr: "#EE8282")
}

extension Themes.color {
    /// 主色 B37A7E
    static let main = UIColor(hexStr: "#B37A7E")
    /// 辅助色, 栗色, 枣红色 702E3E
    static let maroon = UIColor(hexStr: "#702E3E")
    /// 超轻浅灰 FCFCFC
    static let background = UIColor(hexStr: "#FCFCFC")
}

/**
 # #363636 和 #333333 颜色值色差大吗 在视觉上能否选其一即可
 
 在视觉上，颜色值 #363636 和 #333333 的色差相对较小。它们都是深灰色，且在 RGB 颜色模型中，它们的具体值如下：
 #363636 的 RGB 值为 (54, 54, 54)
 #333333 的 RGB 值为 (51, 51, 51)
 色差计算
 可以使用色差公式来计算这两种颜色之间的差异。常用的色差计算方法是使用 Euclidean distance（欧几里得距离）：
 \text{色差} = \sqrt{(R_1 - R_2)^2 + (G_1 - G_2)^2 + (B_1 - B_2)^2}
 
 视觉效果
 在实际应用中，色差约为 5.2，这个值相对较小，通常在视觉上很难区分这两种颜色。尤其是在较小的区域或低对比度的背景下，它们可能看起来几乎是相同的。
 结论
 如果你的设计中需要使用一种深灰色，选择其中之一是可以的，尤其是在不需要高对比度的情况下。为了确保可读性和视觉效果，建议在实际应用中进行测试，看看在特定背景和环境下这两种颜色的表现。
 
 # 在比较颜色 #63666A 和 #666666 时，我们可以先将它们转换为 RGB 值，然后计算它们之间的色差。
 颜色值转换
 #63666A 的 RGB 值为 (99, 102, 106)
 #666666 的 RGB 值为 (102, 102, 102)
 色差计算
 使用欧几里得距离公式来计算这两种颜色之间的差异：
 视觉效果
 色差约为 5，这个值相对较小，通常在视觉上可能难以区分这两种颜色。#63666A 是一种略微偏蓝的深灰色，而 #666666 是标准的深灰色。
 结论
 在实际应用中，如果你需要在设计中选择一种颜色，#63666A 和 #666666 之间的差异相对较小，选择其中之一是可以的，尤其是在不需要高对比度的情况下。建议在实际设计中进行测试，以确保在特定背景和环境下的可读性和视觉效果。
 
 # 所以色差值在多少以内, 能保证用户无法在视觉上区分

 在视觉上，色差值的可区分性通常取决于多个因素，包括颜色的亮度、饱和度、背景色以及用户的视觉敏感度。一般来说，以下是一些关于色差值的指导：
 色差值的可区分性
  微小色差 (0 - 3)
 描述: 颜色几乎无法区分，通常在视觉上是不可察觉的。
 应用: 用于相似的背景和前景元素，强调或细微的状态变化。
 小色差 (4 - 10)
 描述: 颜色之间有轻微的差异，用户在某些情况下可能能够区分，但在大多数情况下仍然难以察觉。
 应用: 用于相邻的 UI 元素，如按钮的不同状态（正常、悬停、按下）。
 中等色差 (11 - 20)
 描述: 颜色之间的差异明显，用户通常能够轻松区分。
 应用: 用于主要的 UI 元素，如标题、按钮和重要信息的强调。
 视觉区分的总结
 0 - 3: 用户几乎无法区分，适合用于相似的元素。
 4 - 10: 用户在某些情况下可能能够区分，但通常难以察觉。
 11 以上: 用户通常能够轻松区分，适合用于需要明确区分的元素。
 其他考虑因素
 背景色: 颜色的背景会影响用户的视觉感知。例如，在深色背景上，浅色和深色之间的色差可能更容易被察觉。
 亮度和饱和度: 颜色的亮度和饱和度也会影响可区分性。相同亮度但不同饱和度的颜色可能更容易区分。
 用户的视觉能力: 不同用户的视觉能力不同，包括色盲和色弱用户，设计时需要考虑这些因素。
 结论
 一般来说，色差值在 3 以内通常可以保证用户在视觉上无法区分，而 4 到 10 之间的色差可能在某些情况下可察觉，但通常仍然难以区分。
 设计时应根据具体的应用场景和用户需求来选择合适的色差范围，以确保良好的用户体验。
 */
